@using RedisReader.Server.Services
@using StackExchange.Redis
@inject IReadFromRedis Reader
@inject KeyStateContainer StateContainer
@inject IJSRuntime JS;

<table id="keys-table" class="table table-bordered">
    <thead>
    <tr>
        <td>No.</td>
        <td>Key</td>
    </tr>
    </thead>
    <tbody>
    @foreach (var (key, index) in KeyList.Select((x, i) => (x, i)))
    {
        <tr>
            <td>@(index + 1)</td>
            <td @onclick="() => ShowValue(key)">@key</td>
        </tr>

    }
    </tbody>
</table>

<div id="list-end" class="mt-5 mb-5 p-5">
    <p></p>
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private List<string> KeyList { get; set; }

    private RedisValue Pattern { get; set; } = "*";
    
    private int Page { get; set; } = 1;
    
    private int PageSize { get; set; } = 30;
    
    bool IsLoading { get; set; } = false;

    bool _stopLoading = false;

    protected override void OnInitialized()
    {
        KeyList = Reader.GetKeys(Id, Pattern, Page, PageSize);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMore();
            await InitJsListenerAsync();
        }
    }

    protected ValueTask InitJsListenerAsync()
    {
        return JS.InvokeVoidAsync("ScrollList.Init", "list-end", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task LoadMore()
    {
        if (!IsLoading)
        {
            IsLoading = true;

            StateHasChanged();

            await Task.Delay(1000);

            KeyList.AddRange(Reader.GetKeys(Id, Pattern, ++Page, PageSize));

            IsLoading = false;

            StateHasChanged();
    //at the end of pages or results stop loading anymore
            //if (PageNumber > 4)
            //{
            //    await StopListener();
            //}
        }
    }

    public async Task StopListener()
    {
        _stopLoading = true;
        IsLoading = false;
        await JS.InvokeVoidAsync("ScrollList.RemoveListener");
        StateHasChanged();
    }

    public void Dispose()
    {
        JS.InvokeVoidAsync("ScrollList.RemoveListener");
    }
    
    private void ShowValue(string key)
    {
       StateContainer.SetKey(key);
    }

}