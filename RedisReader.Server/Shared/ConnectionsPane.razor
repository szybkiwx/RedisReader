@using RedisReader.Server.Services
@inject IStoreConnections ConnectionManager

<!-- Sidebar -->
<div class="sidebar">
    <!-- Sidebar Menu -->
    <nav class="mt-2">
        <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
            @foreach (var (guid, name) in _redisConnections)
            {
                var link = $"connections/{guid}";
                var menuId = $"ctxMenu{guid}"; 
                <ConnectionContextMenu ConnectionId="@guid" MenuId="@menuId" OnModalOpened="@ModalOpened"></ConnectionContextMenu>

                <li class="nav-item">
                    <ContextMenuTrigger MenuId="@menuId">
                        <NavLink class="nav-link" href="@link">
                            <i class="nav-icon fas fa-database"></i>
                            <p>
                                @name
                            </p>
                        </NavLink>
                    </ContextMenuTrigger>
                </li>
            }
            <li class="nav-item">
                <a href="" class="nav-link" @onclick="ShowAddForm" @onclick:preventDefault>
                    <i class="nav-icon fas fa-plus"></i>
                    <p>Add connection</p>
                </a>
            </li>


        </ul>
    </nav>
    <!-- /.sidebar-menu -->
</div>



@code {

    [CascadingParameter] public IModalService Modal { get; set; }

    private IEnumerable<RedisConnection> _redisConnections;

    protected override void OnInitialized()
    {
        LoadConnections();
    }

    private async Task ModalOpened(IModalReference modal)
    {
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            ReLoadConnections();
        }
    }
    private void ReLoadConnections()
    {
        LoadConnections();
        StateHasChanged();
    }
    
    private void LoadConnections()
    {
        _redisConnections = ConnectionManager
            .GetConnections()
            .Select(c => new RedisConnection(c.Id, c.DisplayName));
    }
    
    async Task ShowAddForm()
    {
        var form = Modal.Show<ConnectionForm>("New connection");
        var result = await form.Result;
        if (!result.Cancelled)
        {
            ReLoadConnections();
        }
    }


    public record RedisConnection(Guid Id, string Name);


}