@using RedisReader.Server.Services
@inject IStoreData<Models.RedisConnection> ConnectionStore
@inject IManageRedisConnections ManageRedisConnections
@inject ConnectionStateContainer ConnectionStateContainer

<ul class="nav nav-treeview" style="display: none;">
    
    @foreach (var (guid, name) in _redisConnections)
    {
        var link = $"connections/{guid}";
        var menuId = $"ctxMenu{guid}";
        <ConnectionContextMenu
            ConnectionId="@guid"
            MenuId="@menuId"
            ModalOpened="@ModalOpened"/>
        <ContextMenuTrigger MenuId="@menuId">
            <li class="nav-item">
                <NavLink href="@link" class="nav-link" @ondblclick="() => Connect(guid)">

                    <p>
                        @name
                        <span class="right">
                            @if (ManageRedisConnections.IsConnected(guid))
                            {
                                <i class="fas fa-check-circle" style="color: green"></i>
                            }
                            else
                            {
                                <i class="fas fa-times-circle" style="color:#ff0000"></i>
                            }
                        </span>
                    </p>
                </NavLink>
            </li>
        </ContextMenuTrigger>
    }
    <li class="nav-item">
        <a href="" class="nav-link" @onclick="ShowAddForm" @onclick:preventDefault>
            <i class="nav-icon fas fa-plus"></i>
            <p>Add connection</p>
        </a>
    </li>


</ul>


@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private IEnumerable<RedisConnection> _redisConnections;

    public record RedisConnection(Guid Id, string Name);

    protected override void OnInitialized()
    {
        LoadConnections();
    }

    private async Task ModalOpened(IModalReference modal)
    {
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            ReLoadConnections();
        }
    }

    private void ReLoadConnections()
    {
        LoadConnections();
        StateHasChanged();
    }

    private void LoadConnections()
    {
        _redisConnections = ConnectionStore
            .GetAll()
            .Select(c => new RedisConnection(c.Id, c.DisplayName));
    }

    async Task ShowAddForm()
    {
        var form = Modal.Show<EditConnectionForm>("New connection");
        var result = await form.Result;
        if (!result.Cancelled)
        {
            ReLoadConnections();
        }
    }

    private void Connect(Guid id)
    {
        try
        {
            ManageRedisConnections.Connect(id);
            ConnectionStateContainer.NotifyStateChanged();
        }
        catch (Exception e)
        {
            var parameters = new ModalParameters();
            parameters.Add("Endpoint", ConnectionStore.Get(id).Endpoint);
            parameters.Add("Message", e.Message);

            var options = new ModalOptions
            {
                Class = "blazored-modal-error blazored-modal"
            };

            Modal.Show<CannotConnectModal>("Error connecting to database", parameters, options);
        }
    }





}